services:
  db:
    image: postgres:latest
    container_name: mydb
    ports:
      - "5432:5432" # ローカル開発用にポートを公開します。
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    volumes:
      - db_data:/var/lib/postgresql/data # 名前付きボリューム `db_data` をコンテナのデータディレクトリにマウントします。これにより、コンテナが停止または削除されてもデータが保持されます。
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build: app
    container_name: myapp
    ports:
      - "9000:9000" # Dockerネットワーク内でのみアクセス可能です。
    volumes:
      - ./app/src:/var/www/html # PHPアプリケーションのコードをマウントします。
    environment:
      DB_DATABASE: prtimes
      DB_USERNAME: prtimes
      DB_PASSWORD: prtimes
      TZ: Japan
    depends_on:
      db:
        condition: service_healthy

  web:
    image: nginx:latest
    container_name: myweb
    ports:
      - "80:80" # リバースプロキシをポート80で公開します。
    volumes:
      - ./app/src:/var/www/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf # Nginxの設定ファイルをマウントします。
    depends_on:
      app:
        condition: service_started # `web`コンテナが`app`コンテナの実行後にのみ起動するようにします。

volumes:
  db_data: # コンテナの再起動をまたいでデータを永続化する名前付きボリュームを定義します。
